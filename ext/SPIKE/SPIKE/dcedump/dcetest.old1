
/*dcetest.c*/
/*dave aitel*/

/*

This code under GPL v 2.0 .

See gpl.txt for more information.

*/

#include "tcpstuff.h"

/*here are the types of result packets we get back*/
#define IPTYPE 0x4b

#define NCACN_NP 0x58
#define NCACN_NP2 0x5F
#define NCACN_NP3 0x65
#define NCACN_NP4 0x4C
#define NCACN_NP5 0x4D
#define NCACN_NP6 0x5A
#define NCACN_NP7 0x5B
#define NCACN_NP8 0x5C

#define NCALRPC 0x47
#define NCALRPC2 0x56
#define NCALRPC3 0x4e
#define NCALRPC4 0x45

#define DCEPORT 135

unsigned char buf[5000];
unsigned char keything[16];

#define DPSIZE  16

void  dumpit(char * buffer, int length)
      {
      int c   = 0;
      int l   = 0;
      char ch;
      char cbuf[DPSIZE+1];

      memset(cbuf,0x00,(DPSIZE+1));


      printf ("--dumpit (%u):\n",length);
      
      while(1){

              /* found the end of a line */
              if( c %  DPSIZE == 0){
                      printf (" %s\n %04u ",cbuf,c);
                      memset(cbuf,0x00,(DPSIZE+1));
                      l=0;
                      }

              ch = *(buffer+c);
              printf ("%02X ",ch);

              if( ch > 32 && ch < 0x7e){
                      *(cbuf+l) = ch;
                      }
              else{
                      *(cbuf+l) = '.';

                      }
              c++; 
              l++;

              if( c > length) break;

              }
              /* ok I'm lazy... */

              while( l < DPSIZE){
                      printf("   ");
                      l++;
                      }

              printf(" %s\n",cbuf);
      printf ("\n--end dumpit\n");
      }



int
read_buf(int fd)
{
  return read(fd,buf,sizeof(buf));
}

void
usage()
{
  printf("Usage: dcetest host\n");
  printf("Version 1.2 brought to you by Dave Aitel, daitel@atstake.com.\n");
  printf("Please e-mail me if you have any questions/comments/etc\n");
  printf("No liability is implied or assumed by @stake or Dave Aitel.\n");
  printf("Run this program at your own risk.\n");
  printf("This program under GPL v 2.0\n");
  exit(1);
}

#define BINDPACKET 0x0b
#define REQUESTPACKET 0x00
#define FLAGS 0x03;


void
intel_order(char * buffer, int length)
{
  char temp[5000];
  int i;

  if (length>sizeof(temp))
    {
      printf("error on intel_order\n");
      return;
    }
    

  memcpy(temp,buffer,length);
  for (i=0; i<length; i++)
    {
      buffer[i]=*(temp+length-i-1);
    }

} 

/*intel order any long . . . generates an intel byte order long from
  our long format, whatever it is. So if we're on an intel box, all
  good, and if we're on a sparc, all good.*/
unsigned long 
ioal(unsigned long myint)
{
  unsigned long tint;
  tint=htonl(myint);
  intel_order( (char *) &tint, 4);
  return tint;
}

unsigned short
ioas(unsigned short myshort)
{

  unsigned short tshort;
  tshort=htons(myshort);
  intel_order( (unsigned char *)&tshort, 2);
  return tshort;

}

/*Whatever endian you are, you have an intel endian long, 
  and you want it in your format*/
unsigned long
unintel(unsigned long myint)
{
  unsigned long tint;
  /*first, we reverse it*/
  /*
    printf("intel: %d, nonintel %d\n",myint,ntohl(myint));
  */
  tint=ioal(myint);
  /*now, if we're sparc, we do nothing, and if we're intel, we re-reverse it*/
  return (tint);

}

unsigned long
load_long(unsigned char *from)
{
  unsigned int tint;
  memcpy((unsigned char*)&tint,from,4);
  return unintel(tint);
  
}

unsigned short
load_short(unsigned char *from)
{
  unsigned short tshort;
  /*attempt to make this uninteled properly*/
  tshort=(*from & 0xff ) + (*(from+1) * 0xff );
  return tshort;
}
char *
string_from_buffer(unsigned char *buf,int length)
{
  unsigned char *p;
  unsigned char * retstring;
  int i;

  retstring=malloc(length*2+1);
  memset(retstring,0x00,length*2+1);

  p=buf;
  for (i=0; i<length; i++,p++)
    {
      sprintf(retstring+i*2,"%2.2x",*p);
    }

  /*oooh, the memory leak is nice*/
  return retstring;
}

unsigned char
hex_nib_from_hbyte(unsigned char byte)
{
  int c;
  int b;
  c=byte;
  if ((c >= '0') && (c <= '9'))
    b=c-'0';
  else if ((c >= 'a') && (c <= 'f'))
    b=c-'a'+10;
  else if ((c >= 'A') && (c <= 'F'))
    b=c-'A'+10;

  return b;
}

int
hexstring_to_buffer(char * hexstring,char * buffer)
{
  int i;

  /*
  printf("hexstring_to_buffer %d = %s\n",strlen(hexstring),hexstring);
  */
  /*for each byte of the buffer*/
  for (i=0; i<strlen(hexstring)/2; i++)
    {
      unsigned char nib1;
      unsigned char nib2;
      /*debug hex crap*/
      /*printf("hexstring[i*2]=%c i*2+1=%c\n",hexstring[i*2],hexstring[i*2+1]);*/
      nib1=hex_nib_from_hbyte(hexstring[i*2]);
      nib2=hex_nib_from_hbyte(hexstring[i*2+1]);
      buffer[i]=(nib1<<4)|(nib2<<0);
      /*debug hex crap*/
      /*
      printf("nib1=%x, nib2=%x buffer[i]=%2x\n",nib1,nib2,buffer[i]);
      */
    }
 
  return i;
}

/*takes it in raw off the wire, in wierd intel order*/
/*always 16 bytes long*/
int guid_rawbuffer_to_string(char * buffer, char * mystring)
{
  /*16 total*/
  char tbuffer[4];
  char tbuffer2[2];
  char tbuffer3[2];
  char tbuffer4[2];
  char tbuffer5[6];

  memcpy(tbuffer,buffer,4); /*don't mess with original buffer*/
  memcpy(tbuffer2,buffer+4,2); /*don't mess with original buffer*/
  memcpy(tbuffer3,buffer+6,2); /*don't mess with original buffer*/
  memcpy(tbuffer4,buffer+8,2); /*don't mess with original buffer*/
  memcpy(tbuffer5,buffer+10,6); /*don't mess with original buffer*/
  
  /*swap the bytes that need to be swapped*/
  intel_order(tbuffer,4);
  intel_order(tbuffer2,2);
  intel_order(tbuffer3,2);
  sprintf(mystring,"%s-%s-%s-%s-%s",
	  string_from_buffer(tbuffer,sizeof(tbuffer)),
	  string_from_buffer(tbuffer2,sizeof(tbuffer2)),
	  string_from_buffer(tbuffer3,sizeof(tbuffer3)),
	  string_from_buffer(tbuffer4,sizeof(tbuffer4)),
	  string_from_buffer(tbuffer5,sizeof(tbuffer5)));
  
  return 1; /*always works because we're so cool*/
}


/*hmm. we need to do the intel-reversing on this thing*/
int
uuid_string_to_buffer(unsigned char * buffer, char *uuid)
{
  char tempbuffer[400];
  int err;

  memset(tempbuffer,0x00,sizeof(tempbuffer));
  /*uuids look like <4bytes>-<2bytes>-<2bytes>-<2bytes>-<6bytes>*/
  /*all this stuff is just to get rid of the dashes. Sucks, but sue me.*/
  memcpy(tempbuffer,uuid,8);
  memcpy(tempbuffer+8,uuid+9,4);
  memcpy(tempbuffer+12,uuid+14,4);
  memcpy(tempbuffer+16,uuid+19,4);
  memcpy(tempbuffer+20,uuid+24,12);

  printf("uuid_string_to_buffer:%s from %s\n",tempbuffer,uuid);
  err=hexstring_to_buffer(tempbuffer,buffer);
  if (err)
    {
      intel_order(buffer,4);
      intel_order(buffer+4,2);
      intel_order(buffer+6,2);
      /*intel_order(buffer+8,2);*/ /*this doesn't happen eithar for some reason*/
      /*for some reason the last 8 bytes are in network byte order.*/
      printf("returning %d\n",err);
      return err;
    }
  else
    {
      return 0;
    }
}

int 
dce_bind(int fd, char* uuid, char* transfer_syntax)
{
  unsigned char buffer[409600];

  unsigned char *frag_lengthp;
  int frag_length;

  unsigned char *p;

  printf("dce_bind, fd=%d uuid=%s transfer_syntax=%s\n",fd,uuid,
	 transfer_syntax);

  p=buffer;
  
  *p++=0x05; /*version*/
  *p++=0x00; /*minor version*/

  *p++=BINDPACKET; 
  *p++=FLAGS;

  /*now set Data Rep, whatever that is */
  /*set to 0x10000000 */
  *p++=0x10;
  *p++=0x00;
  *p++=0x00;
  *p++=0x00;

  /*now we have 2 bytes of frag length*/
  frag_lengthp=buffer+8; /*copy the length of the fragment here later*/
  p+=2;

  /*auth length*/
  *p++=0x00;
  *p++=0x00;

  /*call ID */
  *p++=0x01;
  *p++=0x00;
  *p++=0x00;
  *p++=0x00;

  /*buffer xmit frag*/
  *p++=0xd0;
  *p++=0x16;
  /*buffer max recv frag*/
  *p++=0xd0;
  *p++=0x16;
  /*assoc Group*/
  *p++=0x00;
  *p++=0x00;  
  *p++=0x00;
  *p++=0x00;

  /*num ctx items - ethereal incorrect reports this as 1 byte*/
  *p++=0x01;
  *p++=0x00;  
  *p++=0x00;
  *p++=0x00;
  
  /*context ID*/
  *p++=0x00;
  *p++=0x00;

  /*num trans items*/
  *p++=0x01;
  *p++=0x00;

  /*Interface UUID*/
  p+=uuid_string_to_buffer(p,uuid);
  *p++=0x03;/*interface version*/
  *p++=0x00;/*interface version*/
  *p++=0x00;/*interface version*/
  *p++=0x00;/*interface version*/

  p+=uuid_string_to_buffer(p,transfer_syntax);
  *p++=0x02;/*syntax version*/
  *p++=0x00;/*syntax version*/
  *p++=0x00;/*syntax version*/
  *p++=0x00;/*syntax version*/
  
  /*printf("bind frag length=%d\n",p-buffer);*/
  frag_length=p-buffer;
  *frag_lengthp++=(unsigned char)(frag_length & 0xff);
  *frag_lengthp++=(unsigned char)(((frag_length  >> 8 )& 0xff00));

  write(fd,buffer,frag_length);
  return 1;
}

int
dce_enum_bind(int fd)
{
  char uuid[100],transfer_syntax[100];
  strcpy(uuid,"e1af8308-5d1f-11c9-91a4-08002b14a0fa"); /*appears to work*/
  strcpy(transfer_syntax,"8a885d04-1ceb-11c9-9fe8-08002b104860"); /*ditto*/

  dce_bind(fd, uuid, transfer_syntax);
  return 1;
}

int
dce_enum_get(int fd,int callid)
{
  unsigned char buffer[409600];

  unsigned char *frag_lengthp;
  int frag_length;


  unsigned char *p;
  int i;

  memset(buffer,0x00,sizeof(buffer));

  p=buffer;
  
  *p++=0x05; /*version*/
  *p++=0x00; /*minor version*/

  *p++=REQUESTPACKET; 
  *p++=FLAGS;

  /*now set Data Rep, whatever that is */
  /*set to 0x10000000 */
  *p++=0x10;
  *p++=0x00;
  *p++=0x00;
  *p++=0x00;

  /*now we have 2 bytes of frag length*/
  frag_lengthp=buffer+8; /*copy the length of the fragment here later*/
  p+=2;

  /*auth length*/
  *p++=0x00;
  *p++=0x00;

  /*call ID */
  *p++=(unsigned char) callid;
  *p++=0x00;
  *p++=0x00;
  *p++=0x00;

  /*alloc hint*/
  *p++=0x4c; /*76*/
  *p++=0x00;
  *p++=0x00;
  *p++=0x00;
  
  /*context ID*/
  *p++=0x00;
  *p++=0x00;

  /*opnum = 2*/
  *p++=0x02;
  *p++=0x00;
  
  /*null word...*/
  *p++=0x00;
  *p++=0x00;  
  *p++=0x00;
  *p++=0x00;

  /*some other word*/
  *p++=0x01;
  *p++=0x00;  
  *p++=0x00;
  *p++=0x00;

  for (i=0; i<16; i++)
    {
      *p++=0x00;
    }

  /*some other word*/
  *p++=0x02;
  *p++=0x00;  
  *p++=0x00;
  *p++=0x00;


  /*not sure what this is*/
  for (i=0; i<28; i++)
    {
      *p++=0x00;
    }

  /*here we copy our "key". It is 16 bytes long. Filled with Nulls
    until we recieve it from the server from our first request*/
  memcpy(p,keything,16);
  p+=16;

  /*some other word*/
  /*always a one.*/
  *p++=0x01;
  *p++=0x00;  
  *p++=0x00;
  *p++=0x00;


  frag_length=p-buffer;
  *frag_lengthp++=(unsigned char)(frag_length & 0xff);
  *frag_lengthp++=(unsigned char)(((frag_length  >> 8 )& 0xff00));

  write(fd,buffer,frag_length);

  return 1;
}

int
parse_dce_header(unsigned char *buf, unsigned int *fragout)
{
  unsigned char *p;
  unsigned int fraglength;

  p=buf;
/*BYTE Version Major*/
  p++;
/*BYTE Version Minor*/
  p++;
/*BYTE Packet Type: Response=0x02*/
  /*  printf("Header: Packet Type=%2.2x\n",*p); */
  p++;
/*BYTE Packet Flags*/
  p++;
/*IWord Data Rep*/
  p+=4;
/*IHW Frag Length*/
  fraglength=load_long(p);
  *fragout=fraglength;

/*IHW Auth LEngthr*/
/*IWord CAllID*/
  return 16;
}

int
dce_parse_enum_response(int fd)
{
 int bufsize;
 unsigned char *p;
 int tint;
 int i;
 short typefield;
 short sizefield;
 char guidstring[500]; /*really about 18*/
 char servicename[500]; /*overflow. Deal.*/
 char *annotation;
 unsigned int realtype;
 unsigned char newguid[16];
 unsigned short unknownfield1,unknownfield3,othersizefield;
 unsigned int unknownfield2;
 unsigned char unknownfield4;
 unsigned char unknownfield5[16];
 unsigned short port,strlength;
 unsigned char ipfield[4]; /*4 bytes. Long is defined, but wrong*/
 unsigned int fraglength;
 unsigned char iptype;

 memset(guidstring,0x00,sizeof(guidstring));
 memset(servicename,0x00,sizeof(servicename));
 memset(newguid,0x00,sizeof(newguid));
 memset(ipfield,0x00,sizeof(ipfield));

 printf("\nResponse:\n");

 bufsize=read_buf(fd);

 p=buf;
 p+=parse_dce_header(buf,&fraglength);
 if (fraglength==64)
   {
     printf("We're done!\n");
     return 0;
   }

 /*size of something word*/ 
 tint=load_long(buf+16);
 /*printf("Size of something word = %d,%4x\n",tint,tint);*/

 /*skip 2 words*/
 tint=load_long(buf+20);
 /*printf("Unknown word 1=%d\n",tint);*/

 tint=load_long(buf+24);
 /*printf("Unknown word 2=%d\n",tint);*/

 memcpy(keything,buf+28,16);

 /*AFTER KEYTHING*/
 p=buf+28+16;

 /*not sure what these words are yet*/
 for (i=0; i<10; i++)
   {
     tint=load_long(p);
     /*     printf("Word %d=%8x\n",i,tint);*/
     p+=4;
   }

 /*word ten is the annotation length. 1 means no annotation. */
 /*this includes the trailing 0*/
 tint=load_long(p);
 /* printf("Annotation Length=%d\n",tint);*/
 annotation=malloc(tint+5);
 p+=4;
 for (i=0; i<tint; i++)
   {
     annotation[i]=*p;
     p++;
   }

 printf("Annotation=%s\n",annotation);

 /*this is actually a string padded to the nearest mod 4 boundry. So we have to adjust p for that*/
 while (tint%4!=0)
   {
     p++;
     tint++;
   }

 
 /*0x4b000000 for IP/TCP/UDP, 0x58000000 for ncacn_np 0x470000000 for ncalrpc*/ 


 tint=load_long(p);
 p+=4;
 
 realtype=unintel(tint);
 printf("Realtype=0x%8.8x\n",realtype);
 

 /*0x4b000000*/
 tint=load_long(p);
 p+=4;

 /*now a 2 byte type field in intel byte order*/
 memcpy(&typefield,p,2);
 typefield=ioas(typefield);
 p+=2;
 /*printf("typefield=%d\n",typefield);*/
 /*now the size field in intel byte order*/
 /*actually this is size+1 for some reason. Always 0x13*/
 memcpy(&sizefield,p,2);
 sizefield=ioas(sizefield);
 p+=2;
 /*printf("sizefield=%d\n",sizefield);*/

 memcpy(&othersizefield,p,1);
 p+=1;
 /*printf("Othersizefield=0x%2.2x\n",othersizefield);*/

 /*now the GUID*/
 memcpy(newguid,p,16);
 guid_rawbuffer_to_string(newguid,guidstring);
 printf("UUID: %s\n",guidstring);
 p+=16;

 memcpy(&unknownfield1,p,2);
 unknownfield1=ioas(unknownfield1);
 p+=2;
 printf("Probably version: 0x%2.2x\n",unknownfield1);
 
 memcpy(&unknownfield2,p,4);
 unknownfield2=ioal(unknownfield2);
 p+=4;
 
 memcpy(&unknownfield3,p,2);
 unknownfield3=ioas(unknownfield3);
 p+=2;
 
 /*always 0x0d?*/
 unknownfield4=*p;
 p++;
 
 /*now we have 16 bytes that don't seem to ever change*/
 memcpy(unknownfield5,p,16);
 /*printf("Weird 16 byte field: %s\n",string_from_buffer(unknownfield5,16));*/
 p+=16;
 
 /* 0x0200 */
 p+=2;

 /*0x02000000*/
 p+=4;
 
 /*0x0100 */
 p+=2;

 /* 0x0c */
 /* 0x0a for UDP?*/
 /*maybe this is some sort of counter?*/
 p+=1;

 /*0x02000000*/
 p+=4;
 
 /*0x0100 */
 p+=2;

 /*Actually, this is probably a "count" of how many objects we're
   including. It just so happens that ip and ncanrpc have different
   counts.*/


 switch (realtype) 
   {

   case IPTYPE:
     {
      /* JDMC - changed formatting to allow ncacn_http to work */
       printf("Type: ncacn_");
       /*first, the UDP/TCP designation*/
       /*0x08 for udp?*/
       /*0x07*/
       iptype=*p;
       p+=1; 
       
       switch (iptype) {
       case 0x07: printf("ip_tcp\n");
       break;
       case 0x08: printf("ip_udp\n");
	 break;
      /* JDMC */
       case 0x1F: printf("http\n");
	 break;
       default:
        printf("unknown iptype(0x%02X)\n",iptype);
	 break;
       }
       
       
       /*0x0200*/
       p+=2;
       
       memcpy(&port,p,2);
       port=ntohs(port);
       p+=2;
       
       /*0x0100*/
       p+=2;
       
       /*0x090400*/
       p+=3; /* ?????*/
       
       /*now the IP*/
       memcpy(ipfield,p,4);
       printf("bound to ip:port %d.%d.%d.%d:[%d]\n",ipfield[0],ipfield[1],
	      ipfield[2],ipfield[3],port);
     }
     break;
   case NCALRPC4:
   case NCALRPC3:
   case NCALRPC2:
   case NCALRPC:
     {
       printf("Type: ncalrpc\n");
       
       /*0x10*/
       p+=1;
       
       memcpy(&strlength,p,2);
       strlength=ioas(strlength);
       p+=2;
       
       /*includes final 0*/
       /*printf("strlength=%d\n",strlength);*/
       memcpy(servicename,p,strlength);
       printf("Servicename [%s]\n",servicename);
     }
     break;
   case NCACN_NP:
   case NCACN_NP2:
   case NCACN_NP3:
   case NCACN_NP4:
   case NCACN_NP5:
   case NCACN_NP6:
   case NCACN_NP7:
   case NCACN_NP8:
     {
       unsigned short sizeshort;
       /*max size is 0xffff*/
       char ncan_endpoint[0xffff]; 
       char ncan_startpoint[0xffff]; 
       printf("Type: NCACN_NP\n");
       /*0x0f*/
       p+=1;
       /*now a size intel half word*/
       sizeshort=load_short(p);
       p+=2;
       /*now a string - not mod 4'd*/
       /*NCAN Endpoint*/
       /*includes final zero*/
       for (i=0; i<sizeshort; i++)
	 {
	   ncan_endpoint[i]=*p;
	   p++;
	 }

       /*0x0100 - not sure what this is*/
       /*Another string?  It's followed by one character as if this
	 was the size field of a one character array...*/
       p+=2;

       /*0x11*/
       /*not sure what that is eithar. Something important? Hope not.*/
       p+=1;

       
       /*now we do have something important*/
       /*size intel half word*/
       sizeshort=load_short(p);
       p+=2;
       /*size of \\MUX*/
       /*includes final zero*/
       for (i=0; i<sizeshort; i++)
	 {
	   ncan_startpoint[i]=*p;
	   p++;
	 }

       printf("Binding: %s[%s]\n",ncan_startpoint,ncan_endpoint);
     }
     break;
   default: 
     {
       printf("New and unknown type 0x%4x\n",realtype);
     }
   }
  /* JDMC */
#ifdef DEBUG
  dumpit(buf,bufsize);
#endif
 return 1;
}

int
main(int argc, char *argv[])
{
  int fd;
  int i=1;
  int morestuff=1;
  printf("DCE-RPC tester.\n");

  if (argc<2)
       usage();
  
  fd=tcpconnect(argv[1],DCEPORT);
  if (fd==-1)
    {
      printf("Was not able to connect to %s\n",argv[1]);
      exit(1);
    }

  printf("TcpConnected\n");

  dce_enum_bind(fd);
  sleep(1);
  read_buf(fd); /*clear the bind_ack*/

  memset(keything,0x00,16);

  while (morestuff)
    {
      dce_enum_get(fd,i++);
      /*wait for response*/
      sleep(1); /*this is lame, but whatever*/
      morestuff=dce_parse_enum_response(fd);
    }

  printf("Done\n");
  sleep(2);
  return 1;
}

