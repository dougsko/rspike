//CIFS1 - fuzz the initial SMB packet
//./generic_send_tcp 192.168.1.105 445 audits/CIFS/cifs1.spk 0 0
//see listener.h for integer constants

//netbios
s_int_variable(0x00,3); //session type
s_int_variable(0x00,3); //pad
s_binary_block_size_halfword_bigendian_variable("smbblock");

s_block_start("smbblock");
//smb block
s_binary("FF 53 4D 42"); //SMB
s_int_variable(0x72,3); //SMB Command: Negotiate Protocol
s_int_variable(0x00,3); //Error Class: Success
s_int_variable(0x00,3); //reserved
s_int_variable(0x0000,5) ;//error code: no error
s_int_variable(0x00,3); //flags (none)
s_int_variable(0x0000,5); //flags2 (none)
s_int_variable(0x0000,5); //Process ID High (0)
s_binary("0000 00 00 00 00 00 00"); //signature
s_int_variable(0x0000,5); //Reserved                        
s_int_variable(0x0000,5); //Tree ID                        
s_int_variable(0x0000,5); //Process ID 
s_int_variable(0x0000,5); //User ID 
s_int_variable(0x0000,5); //Multiplex ID 
s_int_variable(0x00,3); //word count
s_binary_block_size_intel_halfword_variable("dialects");
s_block_start("dialects");
s_int_variable(0x02,3);
s_string_variable("NT LM 0.12");
s_int_variable(0x00,3);
s_block_end("dialects");
s_block_end("smbblock");
     

//netbios
s_int_variable(0x00,3); //session type
s_int_variable(0x00,3); //pad
s_binary_block_size_halfword_bigendian_variable("smbblock2");

//SESSION NEGOTIATE
s_block_start("smbblock2");
s_binary("ff 53  4d 42"); //smb server component
s_int_variable(0x73,3); //SMB Command: session setup andX
s_binary("00 00 00 00"); //NT Status: Success
s_int_variable(0x18,3); //flags
s_int_variable(0x0120,5); //flags2
s_binary("00 00"); //process ID high
s_binary("00 00 00 00 00 00 00 00"); //signature
s_binary("00 00"); //reserved
s_binary("00 00"); //tree ID
s_binary("8d 2b"); //process ID
s_binary("00 00"); //user ID
s_binary("01 00"); //multiplex ID
s_int_variable(0x0d,3); //word count
s_int_variable(0xff,3); //AndX Command (No further commands)
s_int_variable(0x00,3); //reserved
s_int_variable(0x0000,5); //andX offset
s_int_variable(0xffff,5); //max buffer
s_int_variable(0x0200,5); //max MPX count
s_int_variable(0x0102,5); //vc number (random)
s_binary("00 00 00 00"); //session key
s_binary_block_size_intel_halfword("password");
s_int_variable(0x0000,5); //unicode pass length
s_binary("00 00 00 00"); //reserved
s_binary("01 00 00 00"); //capabilities

s_binary_block_size_intel_halfword("datablock");

s_block_start("datablock");
s_block_start("password");
s_string_variable(""); //password
s_block_end("password");
s_string_variable("");
s_binary("00");
s_string_variable("WORKGROUP");
s_binary("00");
s_string_variable("CANVASOS");
s_binary("00");
s_string_variable("CANVASLANMAN");
s_binary("00");

s_block_end("datablock");
s_block_end("smbblock2");


///IPC CONNECT

s_binary(" 00 00 00 3a ff 53  4d 42 75 00 00 00 00 08 ");
s_binary("01 c0 00 00 00 00 00 00  00 00 00 00 00 00 00 00   ");
s_binary("8d 2b");
s_binary("00 00"); //uid
s_string_variable("");
s_binary(" 01 00 04 ff  00 00 00 00 00 01 00 0f  ");
s_binary("00 00 49 00 50 00 43 00  24 00 00 00 49 50 43 00");

///nt create and X
//construct the smb packet

//netbios
s_int_variable(0x00,3); //session type
s_int_variable(0x00,3); //pad
s_binary_block_size_halfword_bigendian_variable("smbblock3");

s_block_start("smbblock3");

s_binary(" ff 53  4d 42 a2 00 00 00 00 08  01 c0 00 00 00 00 00 00  00 00 00 00 00 00  ");
s_string_variable("");
s_int_variable(0x0000,3); //tid
s_binary("8d 2b ");
s_string_variable("");
s_int_variable(0x0000,3); // uid
s_binary("01 00");
s_string_variable("");
s_binary("18 ff  00 00 00 00 0e 00 00 00");
s_string_variable("");
s_binary("     00 00 00 00 00 00 9f 01  02 00 00 00 00 00 00 00  ");
s_string_variable("");
s_binary("     00 00 00 00 00 00 03 00  00 00 01 00 00 00 00 00  ");
s_string_variable("");
s_binary("     00 00 02 00 00 00 00");
s_string_variable("");
                

s_binary_block_size_intel_halfword("pipename");
s_block_start("pipename");
s_unistring_variable("\\PIPE\\IPC$");
s_block_end("pipename");     

s_string_variable("");                
s_block_end("smbblock3");


//s_smbheader
  s_binary("00");
//  /*pad?*/
  s_binary("00");
  s_binary_block_size_halfword_bigendian_variable("smbblock4");

  s_block_start("smbblock4");

  s_binary(" ff 53  4d 42 25 00 00 00 00 08  01 c0 00 00 00 00 00 00  00 00 00 00 00 00  ");
s_string_variable("");
s_binary("0000"); //tid
  s_binary("8d 2b ");
s_string_variable("");
s_binary("0000"); //uid
  s_binary("01 00");
s_string_variable("");
  s_binary(" 10 00  00 ");
s_string_variable("");
  s_binary_block_size_intel_halfword_variable("DCEFragLength"); 
s_string_variable("");
  s_binary("00 00");
s_string_variable("");
  s_binary_block_size_intel_halfword_variable("DCEFragLength");
s_string_variable("");
  s_binary("00 00 00 00 00 00 00 00 00  00 00 00 52 00 ");
  

  s_binary_block_size_intel_halfword_variable("DCEFragLength");

  s_binary("52 00 02 00");
///*SMB PIPE PROTOCOL*/
s_binary("26 00"); //*transact pipe*/
s_binary("0000"); //fid

  s_binary_block_size_intel_halfword_variable("bytecount");


  s_block_start("bytecount");

  s_binary("00");

  s_unistring("\\PIPE\\");


  //*why does the DCEFrag start here? - but it does*/
  s_block_start("DCEFragLength");  
  //*version*/
  s_binary("05");

  //*minor version*/
  s_binary("00");
  
  s_binary("0x0b");
  //*binds are always just one packet*/
  //*  s_binary((unsigned char) 0x00 | LASTFRAG | FIRSTFRAG);*/
  s_binary("0x03");



  //*now set Data Rep, whatever that is */
  s_intelword(0x00000010);

  //*now we have 2 bytes of frag length*/

  s_binary_block_size_intel_halfword_variable("DCEFragLength");


  //*auth length*/

  s_binary_block_size_intel_halfword_variable("DCEAuthLength");



  //*call ID */
  s_intelword(0x01);

  //*buffer xmit frag*/
  s_binary("d016");
  //*  s_binary("d016");*/

  //*buffer max recv frag*/
  s_binary("d016");
  //*  s_binary("d016");*/

  //*assoc Group*/
  s_binary("00000000");
  //*s_binary("00000000");*/

  //*num ctx items - ethereal incorrect reports this as 1 byte*/
  s_intelword(1);
  
  //*context ID*/
  s_binary("0x0000");

  //*num trans items*/
  //*0x0100*/
  s_intelhalfword(0x01);


  //*Interface UUID*/
s_binary("0102030405060708090a0b0c0e0f")

  //*this is actually 2 intel-ordered shorts, a major and then a minor version*/
  //*0x3000 0000*/ //*major of 3, minor of zero*/
  s_intelhalfword(0x01);
  s_intelhalfword(0x00);

  //*now do syntax*/
s_binary("0102030405060708090a0b0c0e0f")
  
  //*0x200000000*/
     s_intelword(0x20000000);

  s_block_start("DCEAuthLength");
s_string_variable("");
  s_block_end("DCEAuthLength");
  //*caller must end this explicitly*/

  s_block_end("DCEFragLength");  
  s_block_end("smbblock");
  s_block_end("bytecount");
s_string_variable("");
